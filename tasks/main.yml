---
- name: "APT: Install dependencies"
  ansible.builtin.apt:
    pkg:
      - "nginx"
      - "debmirror"
      - "python3-certbot"
      - "python3-certbot-nginx"
    state: present
  when: ansible_os_family == 'Debian'

- name: "APT: Install certbot cloudflare provider"
  ansible.builtin.apt:
    pkg:
      - "python3-certbot-dns-cloudflare"
    state: present
  when: ansible_os_family == 'Debian' and mirror_dns_provider == 'cloudflare'

- name: "DNF: Install dependencies"
  ansible.builtin.dnf:
    name:
      - "nginx"
      - "debmirror"
      - "python3-certbot"
      - "python3-certbot-nginx"
    state: present
  when: ansible_os_family == 'RedHat'

- name: "DNF: Install certbot cloudflare provider"
  ansible.builtin.dnf:
    name:
      - "python3-certbot-dns-cloudflare"
    state: present
  when: ansible_os_family == 'RedHat' and mirror_dns_provider == 'cloudflare'

- name: "Make mirror directory"
  file:
    path: "{{ mirror_destination }}"
    mode: "775"
    state: directory
    owner: nginx
    setype: httpd_sys_content_t

- name: "See if data disk is formatted"
  shell: "lsblk -n -o FSTYPE {{ mirror_data_disk }}"
  register: data_disk
  changed_when: "'xfs' not in data_disk.stdout"

- name: "Format data disk"
  shell: "mkfs.xfs {{ mirror_data_disk }}"
  when: data_disk.changed

- name: "Create fstab entry"
  lineinfile:
    path: /etc/fstab
    regexp: "^{{ mirror_data_disk }} .*"
    line: "{{ mirror_data_disk }} {{ mirror_destination }} xfs defaults{{ ',context=system_u:object_r:httpd_sys_content_t:s0' if ansible_os_family == 'RedHat' else '' }} 0 1"
  register: fstab

- name: "Mount data disk"
  shell: "mount -a"
  when: fstab.changed

- name: "UFW: enable http"
  community.general.ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  with_items:
    - 80
    - 443
  when: ansible_os_family == 'Debian'

- name: "FirewallD: enable http"
  firewalld:
    immediate: yes
    permanent: yes
    port: "{{ item }}/tcp"
    state: enabled
  with_items:
    - 80
    - 443
  when: ansible_os_family == 'RedHat'

- name: "Install mirror configuration"
  template:
    src: mirror.conf.j2
    dest: /etc/mirror.conf
    owner: root
    mode: "644"

- name: "Install mirror script"
  copy:
    src: mirror.py
    dest: /usr/local/bin/mirror.py
    owner: root
    mode: "755"

- name: "Install cron task"
  copy:
    src: mirror.cron
    dest: /etc/cron.d/mirror
    owner: root
    mode: "644"

- name: "Install nginx configuration"
  template:
    src: nginx-mirror.j2
    dest: "{{ '/etc/nginx/sites-available/mirror' if ansible_os_family == 'Debian' else '/etc/nginx/conf.d/mirror.conf' }}"
    owner: root
    mode: "644"
  notify: nginx_restart

- name: "Nginx: enable mirror"
  file:
    src: /etc/nginx/sites-available/mirror
    dest: /etc/nginx/sites-enabled/mirror
    state: link
    owner: root
  notify: nginx_restart
  when: ansible_os_family == 'Debian'

- name: "CertBot: save cloudflare credentials"
  copy:
    dest: /etc/letsencrypt/cloudflare.ini
    content: "dns_cloudflare_api_token = '{{ mirror_dns_apikey }}'"
    owner: root
    mode: "600"
  when: mirror_dns_provider == "cloudflare"

- name: "CertBot: save godaddy credentials"
  copy:
    dest: /etc/letsencrypt/godaddy.ini
    content: 'dns_godaddy_api_token="{{ mirror_dns_apikey }}"'
    owner: root
    mode: "600"
  when: mirror_dns_provider == "godaddy"

- name: "CertBot: Godaddy: Install Scripts"
  copy:
    dest: "/usr/local/bin/{{ item }}"
    src: "{{ item }}"
    mode: "755"
    owner: root
  with_items:
    - "godaddydnsauth.sh"
    - "godaddydnsauthclean.sh"

- name: "CertBot: Detect if we need to run"
  shell: certbot certificates -d {{ inventory_hostname }}
  register: certbot
  changed_when: ('VALID' not in certbot.stdout)
  failed_when: false

- name: "CertBot: Cloudflare: get certificate"
  shell: "certbot certonly --dns-cloudflare --dns-cloudflare-credentials /etc/letsencrypt/cloudflare.ini -d {{ inventory_hostname }} --agree-tos -n -m {{ mirror_dns_email }} --deploy-hook 'systemctl reload nginx'"
  when: mirror_dns_provider == "cloudflare" and "VALID" not in certbot.stdout
  throttle: 1

- name: "CertBot: Godaddy: get certificate"
  shell: "certbot certonly --manual --preferred-challenges=dns --manual-auth-hook /usr/local/bin/godaddydnsauth.sh --manual-cleanup-hook /usr/local/bin/godaddydnsauthclean.sh -d {{ inventory_hostname }} --agree-tos -n -m {{ mirror_dns_email }} --deploy-hook 'systemctl reload nginx'"
  when: mirror_dns_provider == "godaddy" and "VALID" not in certbot.stdout
  throttle: 1
